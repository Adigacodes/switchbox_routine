#include <iostream>
//try this
using namespace std;

template<class T>
class Stack{
    private:
        struct node{
            T data;
            struct node * next;
        };
        struct node * head;
    public:
        Stack(){
            head = NULL;
        }
        void push(T);
        T pop();
        T top();
        bool empty();        
};

template<class T>
void Stack<T>::push(T a){
    struct node *newnode;
    newnode = new node;
    newnode->data = a;
    newnode->next = head;
    head = newnode;
    cout<<"\nPushed "<<newnode->data<<"\n";
}

template<class T>
T Stack<T>::pop(){
    if(head==NULL)
        cout<<"\nUnderflow\n\n";
    else{
        struct node *temp;
        T n;
        temp = head;
        n = head->data;
        head = head->next;
        free(temp);
        cout<<"\nPoped "<<n<<"\n";
        return n;
    }
}

template<class T>
T Stack<T>::top(){
    if(head==NULL)
        cout<<"\nUnderflow\n\n";
    else
        return head->data;
}

template<class T>
bool Stack<T>::empty(){
    if(head==NULL)
        return true;
    else
        return false;    
}


bool check(int net[], int n){
    Stack<int>* s = new Stack<int>;

    for (int i = 0; i < n; i++)
    {
        if(!s->empty())
            if (net[i] == net[s->top()])
                s->pop();
            else
                s->push(i);
        else
            s->push(i);
    }

    if (s->empty())
    {
        cout<<"Switch box is routable\n";
        return true;
    }

    cout<<"Switch box is not routable\n";
    return false;
}

int main(){
    cout<<"Enter the number of pins: ";
    int n;
    cin>>n;

    int* net = new int[n];

    cout<<"enter the nets for pin 1 through "<<n<<endl;
    for (int i = 0; i < n; i++)
        cin>>net[i];

    check(net,n);
}
